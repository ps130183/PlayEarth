package com.km.rmbank.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.km.rmbank.greendao.bean.Contact;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTACT".
*/
public class ContactDao extends AbstractDao<Contact, Long> {

    public static final String TABLENAME = "CONTACT";

    /**
     * Properties of entity Contact.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ContactId = new Property(1, Long.class, "contactId", false, "contact_id");
        public final static Property ContactName = new Property(2, String.class, "contactName", false, "contact_name");
        public final static Property ContactNameSpell = new Property(3, String.class, "contactNameSpell", false, "contact_name_spell");
        public final static Property ContactNameFirstLetter = new Property(4, String.class, "contactNameFirstLetter", false, "contact_name_first_letter");
        public final static Property Phone = new Property(5, String.class, "phone", false, "phone");
        public final static Property IsInvited = new Property(6, boolean.class, "isInvited", false, "is_invited");
    }


    public ContactDao(DaoConfig config) {
        super(config);
    }
    
    public ContactDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTACT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"contact_id\" INTEGER," + // 1: contactId
                "\"contact_name\" TEXT," + // 2: contactName
                "\"contact_name_spell\" TEXT," + // 3: contactNameSpell
                "\"contact_name_first_letter\" TEXT," + // 4: contactNameFirstLetter
                "\"phone\" TEXT," + // 5: phone
                "\"is_invited\" INTEGER NOT NULL );"); // 6: isInvited
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_CONTACT__id ON \"CONTACT\"" +
                " (\"_id\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTACT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Contact entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long contactId = entity.getContactId();
        if (contactId != null) {
            stmt.bindLong(2, contactId);
        }
 
        String contactName = entity.getContactName();
        if (contactName != null) {
            stmt.bindString(3, contactName);
        }
 
        String contactNameSpell = entity.getContactNameSpell();
        if (contactNameSpell != null) {
            stmt.bindString(4, contactNameSpell);
        }
 
        String contactNameFirstLetter = entity.getContactNameFirstLetter();
        if (contactNameFirstLetter != null) {
            stmt.bindString(5, contactNameFirstLetter);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
        stmt.bindLong(7, entity.getIsInvited() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Contact entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long contactId = entity.getContactId();
        if (contactId != null) {
            stmt.bindLong(2, contactId);
        }
 
        String contactName = entity.getContactName();
        if (contactName != null) {
            stmt.bindString(3, contactName);
        }
 
        String contactNameSpell = entity.getContactNameSpell();
        if (contactNameSpell != null) {
            stmt.bindString(4, contactNameSpell);
        }
 
        String contactNameFirstLetter = entity.getContactNameFirstLetter();
        if (contactNameFirstLetter != null) {
            stmt.bindString(5, contactNameFirstLetter);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
        stmt.bindLong(7, entity.getIsInvited() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Contact readEntity(Cursor cursor, int offset) {
        Contact entity = new Contact( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // contactId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // contactName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // contactNameSpell
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // contactNameFirstLetter
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phone
            cursor.getShort(offset + 6) != 0 // isInvited
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Contact entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setContactId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setContactName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContactNameSpell(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContactNameFirstLetter(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsInvited(cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Contact entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Contact entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Contact entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
